import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import yfinance as yf
from textblob import TextBlob

# Carregar vari√°veis de ambiente
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Configurar Gemini
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# Configurar p√°gina Streamlit
st.set_page_config(
    page_title="Market Analysis AI",
    page_icon="üìä",
    layout="wide"
)

# Cabe√ßalho e Descri√ß√£o
st.title("üìä Market Analysis AI")
st.markdown("""
### Bem-vindo ao seu Assistente de An√°lise de Mercado!

Esta ferramenta combina:
- üìà **Dados em Tempo Real**: Acesso a informa√ß√µes atualizadas do mercado financeiro
- ü§ñ **Intelig√™ncia Artificial**: An√°lises geradas pelo Google Gemini Pro
- üì∞ **An√°lise de Sentimento**: Avalia√ß√£o do sentimento do mercado sobre diferentes setores

#### Como Usar:
1. **Para Dados de A√ß√µes**: 
   - Use s√≠mbolos em mai√∫sculo (ex: "Como est√° a a√ß√£o AAPL?" ou "An√°lise GOOGL")
   - S√≠mbolos populares: AAPL (Apple), GOOGL (Google), MSFT (Microsoft), AMZN (Amazon)

2. **Para An√°lise Setorial**:
   - Fa√ßa perguntas sobre setores espec√≠ficos (ex: "Como est√° o setor de tecnologia?")
   - Setores dispon√≠veis: Tecnologia, Varejo, Finan√ßas, Sa√∫de, etc.

#### Exemplos de Perguntas:
- üíº "Qual a situa√ß√£o atual da AAPL?"
- üì± "Analise o mercado de tecnologia"
- üè™ "Como est√° o setor de varejo?"
- üí∞ "Me d√™ uma an√°lise do setor financeiro"
""")

# Linha divis√≥ria
st.markdown("---")

# Inicializar mem√≥ria de sess√£o
if "messages" not in st.session_state:
    st.session_state.messages = []

def get_stock_data(symbol: str) -> str:
    """Obt√©m dados em tempo real de a√ß√µes."""
    try:
        stock = yf.Ticker(symbol)
        info = stock.info
        current_price = info.get('currentPrice', 'N/A')
        previous_close = info.get('previousClose', 'N/A')
        volume = info.get('volume', 'N/A')
        market_cap = info.get('marketCap', 'N/A')
        if market_cap != 'N/A':
            market_cap = f"${market_cap/1000000000:.2f}B"
        
        return f"""
        üìä Dados da a√ß√£o {symbol}:
        üí∞ Pre√ßo atual: ${current_price}
        üìà Fechamento anterior: ${previous_close}
        üìä Volume: {volume}
        üè¢ Market Cap: {market_cap}
        """
    except Exception as e:
        return f"‚ùå Erro ao obter dados da a√ß√£o {symbol}: {str(e)}"

def analyze_market_sentiment(query: str) -> str:
    """Analisa o sentimento do mercado baseado em uma consulta."""
    analysis = TextBlob(query)
    sentiment = analysis.sentiment.polarity
    
    if sentiment > 0:
        return f"üìà Sentimento POSITIVO detectado ({sentiment:.2f}). O mercado demonstra otimismo."
    elif sentiment < 0:
        return f"üìâ Sentimento NEGATIVO detectado ({sentiment:.2f}). O mercado demonstra cautela."
    else:
        return f"‚û°Ô∏è Sentimento NEUTRO detectado ({sentiment:.2f}). O mercado aparenta estabilidade."

def process_query(query: str) -> str:
    """Processa a query do usu√°rio e retorna uma resposta."""
    
    # Verifica se √© uma consulta de a√ß√£o
    stock_symbols = [word for word in query.split() if word.isupper() and len(word) >= 2]
    if stock_symbols:
        stock_data = get_stock_data(stock_symbols[0])
        context = f"Dados do mercado:\n{stock_data}"
    else:
        # Analisa sentimento do mercado
        sentiment_analysis = analyze_market_sentiment(query)
        context = f"An√°lise de sentimento:\n{sentiment_analysis}"
    
    # Gera resposta com o Gemini
    prompt = f"""
    Como analista de mercado especializado, responda √† seguinte pergunta:
    {query}
    
    Use estas informa√ß√µes como contexto:
    {context}
    
    Forne√ßa uma an√°lise detalhada e profissional, incluindo:
    1. Interpreta√ß√£o dos dados/sentimento
    2. Poss√≠veis implica√ß√µes
    3. Contexto do mercado atual
    
    Use uma linguagem clara e profissional.
    """
    
    response = model.generate_content(prompt)
    return response.text

# Interface do chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("üí≠ Como posso ajudar com sua an√°lise de mercado?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§î Analisando o mercado..."):
            response = process_query(prompt)
            st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

# Rodap√©
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>Desenvolvido com ‚ù§Ô∏è usando Streamlit e Google Gemini Pro</p>
    <p>Dados fornecidos por Yahoo Finance | An√°lise de Sentimento por TextBlob</p>
</div>
""", unsafe_allow_html=True)
