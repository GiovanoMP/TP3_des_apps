"""
ContentCraft AI - Ponto de Entrada Principal da Aplica√ß√£o
"""
from src.agents.coordinator import CoordinatorAgent
from src.interface.app import main as app_main

def inicializar_sistema():
    """Inicializa todos os componentes necess√°rios"""
    coordenador = CoordinatorAgent()
    return coordenador

def main():
    """Ponto de entrada principal para o sistema ContentCraft AI"""
    # Inicializa o sistema
    coordenador = inicializar_sistema()
    
    # Inicia a interface Streamlit
    app_main()

if __name__ == "__main__":
    import os
    import streamlit as st
    from dotenv import load_dotenv
    from langchain.agents import Tool, AgentType, initialize_agent
    from langchain.memory import ConversationBufferMemory
    from langchain.chat_models import ChatOpenAI
    import json

    # Carrega vari√°veis de ambiente
    load_dotenv()

    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="An√°lise de Mercado",
        page_icon="üìä",
        layout="wide"
    )

    # Verifica a chave da API
    if 'OPENAI_API_KEY' not in os.environ:
        st.error("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada!")
        st.info("Por favor, configure sua chave da API OpenAI no arquivo .env")
        st.stop()

    # Dados de exemplo
    MARKET_DATA = {
        "Tecnologia": {
            "tamanho": "US$ 5.2 trilh√µes",
            "crescimento": "5.4% ao ano",
            "tendencias": ["IA", "Cloud Computing", "IoT"],
            "desafios": ["Regulamenta√ß√µes", "Seguran√ßa"]
        },
        "Varejo": {
            "tamanho": "US$ 25 trilh√µes",
            "crescimento": "4.8% ao ano",
            "tendencias": ["E-commerce", "Omnichannel"],
            "desafios": ["Log√≠stica", "Concorr√™ncia"]
        },
        "Servi√ßos": {
            "tamanho": "US$ 6.8 trilh√µes",
            "crescimento": "3.9% ao ano",
            "tendencias": ["Digitaliza√ß√£o", "Automa√ß√£o"],
            "desafios": ["Qualifica√ß√£o", "Adapta√ß√£o"]
        }
    }

    def pesquisar_mercado(setor: str) -> str:
        """Pesquisa informa√ß√µes sobre um setor de mercado"""
        return json.dumps(MARKET_DATA.get(setor, {}), ensure_ascii=False)

    def analisar_competidores(setor: str) -> str:
        """Analisa os competidores de um setor"""
        competidores = {
            "Tecnologia": [
                {"nome": "Tech A", "participacao": "15%"},
                {"nome": "Tech B", "participacao": "12%"}
            ],
            "Varejo": [
                {"nome": "Mega Store", "participacao": "20%"},
                {"nome": "Shop Corp", "participacao": "18%"}
            ],
            "Servi√ßos": [
                {"nome": "Service Pro", "participacao": "10%"},
                {"nome": "Consult Corp", "participacao": "8%"}
            ]
        }
        return json.dumps(competidores.get(setor, []), ensure_ascii=False)

    @st.cache_resource
    def criar_agente():
        """Cria e retorna um agente de an√°lise de mercado"""
        # Configura o modelo
        llm = ChatOpenAI(
            temperature=0.7,
            model="gpt-3.5-turbo"
        )
        
        # Define as ferramentas
        tools = [
            Tool(
                name="PesquisarMercado",
                func=pesquisar_mercado,
                description="Pesquisa informa√ß√µes sobre um setor de mercado espec√≠fico. Input deve ser o nome do setor (Tecnologia, Varejo ou Servi√ßos)."
            ),
            Tool(
                name="AnalisarCompetidores",
                func=analisar_competidores,
                description="Analisa os principais competidores de um setor espec√≠fico. Input deve ser o nome do setor (Tecnologia, Varejo ou Servi√ßos)."
            )
        ]
        
        # Configura a mem√≥ria
        memory = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True
        )
        
        # Cria o agente
        return initialize_agent(
            tools,
            llm,
            agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,
            memory=memory,
            verbose=True
        )

    def main():
        st.title("ü§ñ Assistente de An√°lise de Mercado")
        
        # Descri√ß√£o do sistema
        st.markdown("""
        Este assistente usa LangChain e o framework ReAct para realizar an√°lises de mercado.
        Ele pode:
        - Pesquisar informa√ß√µes sobre diferentes setores
        - Analisar competidores
        - Fornecer insights estrat√©gicos
        """)
        
        # Inicializa o hist√≥rico de chat
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        # Exibe mensagens anteriores
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Campo de entrada do usu√°rio
        if prompt := st.chat_input("Fa√ßa uma pergunta sobre o mercado..."):
            # Adiciona a pergunta do usu√°rio ao chat
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Processa a resposta do agente
            with st.chat_message("assistant"):
                with st.spinner("Analisando..."):
                    agent = criar_agente()
                    try:
                        response = agent.run(input=prompt)
                        st.markdown(response)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                    except Exception as e:
                        st.error(f"Erro: {str(e)}")

    main()
